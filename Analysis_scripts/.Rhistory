print(out)
library(tidyverse)
library(NMOF)
cosine_distance <- function(xs, ys) {
1 - cos(xs - ys)
}
gridfunc = function(param, true_phases, pred_phases){
shift_from_original = param[1]
mean(cosine_distance(true_phases, (pred_phases + shift_from_original)%%(2*pi))^2)
}
find_best_forward_backward_alignment_grid_search <- function(l1, l2) {
true_phases = l1[!is.na(l2)]
pred_phases = l2[!is.na(l2)]
forward_search = gridSearch(gridfunc, levels = list(x =  seq(-2*pi, 2*pi, by = .05)), method = 'multicore', mc.control = list(mc.cores = 10), true_phases = true_phases, pred_phases = pred_phases)
forward_min = forward_search$minfun
forward_shift = forward_search$minlevel
forward_list_of_phases = (pred_phases+forward_shift)%%(2*pi)
pred_phases = (-l2[!is.na(l2)])%%(2*pi)
# reverse_search = gridSearch(gridfunc, levels = list(x =  seq(-2*pi, 2*pi, by = .05)), method = 'multicore', mc.control = list(mc.cores = 10), true_phases = true_phases, pred_phases = pred_phases)
# reverse_min = reverse_search$minfun
# reverse_shift = reverse_search$minlevel
# reverse_list_of_phases = (pred_phases+reverse_shift)%%(2*pi)
#
#if(forward_min < reverse_min) {
# return(forward_list_of_phases)
#}
# return(reverse_list_of_phases)
return(forward_list_of_phases)
}
library(openxlsx)
# URL of the file you want to download
url <- "https://www.pnas.org/doi/suppl/10.1073/pnas.1508249112/suppl_file/pnas.1508249112.sd01.xlsx"
# # Temporary file path to save the downloaded file
url = "~/Downloads/pnas.1508249112.sd01 (1).xlsx"
# Print the path to the downloaded file
Chen_acrophases =  read.xlsx(url,sheet=1)
#keep genes with significance < 0.2
Chen_acrophases = dplyr::filter(Chen_acrophases, BA11.qval  < 0.2) %>% dplyr::select(Gene, BA11.Peak)
# Chen_acrophases = dplyr::filter(Chen_acrophases, Combined.qval  < 0.05) %>% dplyr::select(Gene, BA11.Peak)
#rename C1orf51 -> CIART
Chen_acrophases[1,1] = "CIART"
#Convert gene acrophase to radians
Chen_acrophases$BA11.Peak_mod = ((Chen_acrophases$BA11.Peak) *pi / 12) %% (2*pi)
human_symb_remap = read.csv("https://data.broadinstitute.org/gsea-msigdb/msigdb/annotations/human/Human_Gene_Symbol_with_Remapping_MSigDB.v2024.1.Hs.chip",sep="\t")
check_for_alias <- function(gene_list){
translation_dict = filter(human_symb_remap, Probe.Set.ID %in% gene_list)
}
trans_dict = check_for_alias(Chen_acrophases$Gene)
Chen_acrophases$Gene_symbol_remapped = trans_dict$Gene.Symbol[match(Chen_acrophases$Gene, trans_dict$Probe.Set.ID)]
pseudobulk_acros = read_csv("../Cyclops_ordering/downstream_output_Pseudobulk_all/cosinor_results_CTL.csv", show_col_types = F)
# Which genes are only found (in rosmap expression data) with remapping?
genes_found_remapping_only_idx = which(Chen_acrophases$Gene_symbol_remapped %in% pseudobulk_acros$Gene_Symbols & !(Chen_acrophases$Gene %in% pseudobulk_acros$Gene_Symbols))
Chen_acrophases$Symbol_final = Chen_acrophases$Gene
Chen_acrophases$Symbol_final[genes_found_remapping_only_idx] = Chen_acrophases$Gene_symbol_remapped[genes_found_remapping_only_idx]
#filter out genes in my data that are significantly cycling and also in Chen list:
tmp = dplyr::filter(pseudobulk_acros, (Gene_Symbols %in% Chen_acrophases$Symbol_final) & as.numeric(BHQ) < 0.1 & as.numeric(amp_ratio) > 0.2) %>% dplyr::select(Gene_Symbols, acrophase, BHQ)
#merge the Chen info with my info
df = merge(Chen_acrophases, tmp, by.x = "Symbol_final", by.y = "Gene_Symbols" )
df$shifted_phase = find_best_forward_backward_alignment_grid_search(df$BA11.Peak_mod, as.numeric(df$acrophase))
library(circular)
source("../Analysis_scripts/downstream_helpers/CircularCorrelations.R")
Fischer_Circular_CorrelationMeasures(df$BA11.Peak_mod, df$shifted_phase)
Jammalamadaka_Circular_CorrelationMeasures(df$BA11.Peak_mod, df$shifted_phase)
core_clock = toupper(c("Arntl", "Clock", "Npas2", "Nr1d1", "Bhlhe41",   "Nr1d2", "Dbp", "Ciart", "Per1", "Per3", "Tef", "Hlf", "Cry2","Per2", "Cry1", "Rorc", "Nfil3"))
# Calculate circular correlation
circular_corr <- cor.circular(df$BA11.Peak_mod, df$shifted_phase, test = T)
out = ggplot(df, aes(x = BA11.Peak_mod, y = shifted_phase, label = Gene) )+
geom_point(shape = 16, size = 2, alpha = .7,color = "#0091ff")+
xlim(0, 2*pi)+
ylim(0, 2*pi)+
# geom_text(hjust=0, vjust=0)+
ggrepel::geom_text_repel(data = subset(df, Gene %in% core_clock),
aes(label = Gene),
box.padding = 0.5,
point.padding = 0.5,
size = 5)+
ylab("Predicted Gene Acrophase in ROSMAP")+
xlab("Measured Gene Acrophase from Chen et al.")+
ggtitle(paste0("Circular Correlation: ", round(circular_corr$cor, 2), ", p-val: ", round(circular_corr$p.value, 3)))+
scale_x_continuous(breaks = seq(0, 2 * pi, by = pi/2),
labels = c("0", expression(pi/2), expression(pi),                           expression(3*pi/2), expression(2*pi))) +
scale_y_continuous(breaks = seq(0, 2 * pi, by = pi/2),
labels = c("0", expression(pi/2), expression(pi),                           expression(3*pi/2), expression(2*pi)))+
theme_minimal()+
theme(
axis.text.x = element_text(size = 14),    # Increase x-axis text size
axis.text.y = element_text(size = 14),    # Increase y-axis text size
axis.title.x = element_text(size = 16),   # Increase x-axis title size
axis.title.y = element_text(size = 16),   # Increase y-axis title size
legend.title = element_text(size = 12)    # Increase legend title size
)
print(out)
library(tidyverse)
library(gridExtra)
#path to cyclops ordering
cyclops_fit= "../Cyclops_ordering/Fits/Fit_Output_2024-11-25T13_12_00.csv"
#I want to arrange the heatmaps by acrophase so I need cycling results
CTL_cycling_file = "../Cyclops_ordering/downstream_output_Mglia_all/cosinor_results_CTL.csv"
uncorrected_tmm_path = "../normed_counts/Mglia_all_FiltByExprDefault_TMM.csv"
plot_names = "Mglia_all_binned_median_znormed"
cyc_pred = read_csv(cyclops_fit, show_col_types = F) %>% arrange(Phase)
CTL_cycling_res = read_csv(CTL_cycling_file, show_col_types = F)
setwd("../Analysis_scripts/MsigDB_gmts_for_GSEA")
Kegg = fgsea::gmtPathways("c2.cp.kegg_legacy.v2024.1.Hs.symbols.gmt")
# pathway_name = "OxPhos"
# pathway_terms = Kegg$KEGG_OXIDATIVE_PHOSPHORYLATION
pathway_name = "Ribosome"
pathway_terms = Kegg$KEGG_RIBOSOME
pathway_terms = c(pathway_terms,CTL_cycling_res$Gene_Symbols[grep("MRP[SL]", CTL_cycling_res$Gene_Symbols)] )
#find genes in pathway cycling in CTLs
pathway_terms_cycling_CTL = filter(CTL_cycling_res, Gene_Symbols %in% pathway_terms & BHQ < 0.1) %>% dplyr::select(Gene_Symbols) %>% unname %>% unlist
library(doParallel)
# Custom .combine function
combine_lists <- function(x, y) {
# Combine corresponding elements (first and second) of the lists
list(
first = rbind(x[[1]], y[[1]]),
second = rbind(x[[2]], y[[2]])
)
}
uncorrected_tmm = read_csv(uncorrected_tmm_path, show_col_types = F)
#test which genes are cycling from cyclops subject phase prediction
regress_out_batch = function(cyc_pred, tmm){
cat("\nRegressing out batch offset")
seedlist = pathway_terms
cond_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "cond_d")
cyc_pred$Covariate_D = tmm[cond_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
sex_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "sex_d")
cyc_pred$sex = tmm[sex_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
pmi_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "pmi_c")
cyc_pred$pmi = tmm[pmi_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
batch_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "batch_d")
cyc_pred$batch = tmm[batch_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
preds= dplyr::select(cyc_pred, ID, Covariate_D, Phase, batch, pmi, sex) %>% arrange(Phase)
gene = tmm[which(unlist(unname(tmm[,1])) %in% seedlist), -1]
# gene = apply(gene, 2, as.numeric)
gene = gene %>% mutate_all(as.numeric)
gene1 = t(gene[,na.exclude(match(preds$ID, colnames(gene)))])  # get the transpose, subjects x genes and put in order of CYCLOPS order
colnames(gene1) =  unname(unlist(tmm[which(unname(unlist(tmm[,1])) %in% seedlist), 1]))  #add the gene names to the columns of gene1
#batch factor
b = as.factor(preds$batch[match(rownames(gene1), preds$ID)])
# CTL or AD factor
I = as.factor(preds$Covariate_D[match(rownames(gene1), preds$ID)])
#in the case that I have CYCLOPS preds for subs not in tmm...
times = as.numeric(preds$Phase[match(rownames(gene1), preds$ID)])
#sex of each subject
s = as.factor(preds$sex[match(rownames(gene1), preds$ID)])
#pmi of each subject
p = as.numeric(preds$pmi[match(rownames(gene1), preds$ID)])
all_genes = foreach (gene_i = 1:ncol(gene1), .combine = combine_lists) %do%{
gexp1 = as.numeric(unlist(gene1[,gene_i]))
times1 = times
I1 = I
s1 = s
p1 = p
b1 = b
rm_NA = which(is.na(gexp1))
if(!is_empty(rm_NA)){
gexp1 = gexp1[-rm_NA]
times1 = times1[-rm_NA]
I1 = I[-rm_NA]
s1 = s1[-rm_NA]
p1 = p1[-rm_NA]
b1 = b1[-rm_NA]
}
partial_model = lm(gexp1 ~ sin(times1) + cos(times1) + I1 + b1 + p1 + s1)
full_model = lm(gexp1 ~ I1*sin(times1) + I1*cos(times1) + I1 + b1 + p1 + s1)
design_matrix <- model.matrix(gexp1 ~ I1*sin(times1) + I1*cos(times1) + I1 + b1 + p1 + s1)
anova_results = anova(partial_model, full_model)
p_val = anova_results$`Pr(>F)`[2]
Gene_Symbols = colnames(gene1)[gene_i]
sin_coeff = full_model[["coefficients"]][["sin(times1)"]]
cos_coeff = full_model[["coefficients"]][["cos(times1)"]]
sin_coeff2 = full_model[["coefficients"]][["I1cond_1:sin(times1)"]] + sin_coeff
cos_coeff2 = full_model[["coefficients"]][["I1cond_1:cos(times1)"]] + cos_coeff
acrophase_CTL = atan2(sin_coeff, cos_coeff) %% (2*pi)
acrophase_AD = atan2(sin_coeff2, cos_coeff2) %% (2*pi)
amplitude_CTL = sqrt((sin_coeff^2) + (cos_coeff^2))
amplitude_AD = sqrt((sin_coeff2^2) + (cos_coeff2^2))
rm_coeffs = grep("sin|cos",names(full_model[["coefficients"]]))
mesor_AD = mean(subset(design_matrix[,-rm_coeffs], design_matrix[, "I1cond_1"]== 1 ) %*% full_model[["coefficients"]][-rm_coeffs])
mesor_CTL = mean(subset(design_matrix[,-rm_coeffs], design_matrix[, "I1cond_1"]== 0 ) %*% full_model[["coefficients"]][-rm_coeffs])
amp_ratio_CTL = amplitude_CTL/ mesor_CTL
amp_ratio_AD = amplitude_AD/ mesor_AD
gene_summary = cbind( Gene_Symbols, p_val, acrophase_AD, acrophase_CTL, amplitude_AD, amplitude_CTL, amp_ratio_CTL, amp_ratio_AD, mesor_CTL, mesor_AD)
batch_offset_correct = design_matrix[,"b1cond_1"] * full_model$coefficients[["b1cond_1"]]
gexp_out = gexp1 - batch_offset_correct
names(gexp_out) = rownames(gene1) #retain each subject ID
list(gene_summary, gexp_out)
}
return(all_genes)
}
df = regress_out_batch(cyc_pred, uncorrected_tmm)
cycling_params = as.data.frame(df$first) #Do these match preds?
tmm_corrected = as.data.frame(df$second)
rownames(tmm_corrected) = cycling_params$Gene_Symbols
tmm_corrected = tmm_corrected[,as.character(cyc_pred$ID)]
#Define z-norm function
znorm = function(x){
x = as.numeric(x)
m = mean(x)
s = sd(x)
return((x-m)/s)
}
tmm = tmm_corrected %>% rownames_to_column(var = "Gene_Symbols")
#create breaks of (0, 2pi]
# cyc_pred$interval = cut(cyc_pred$Phase,breaks = seq(0, 2*pi, by = pi/2) )
cyc_pred$interval = cut(cyc_pred$Phase,breaks = seq(0, 2*pi, by = pi/4) )
#select genes from tmm in pathway, convert to numeric, transpose to subsXgenes
pathway_tmm = tmm %>% dplyr::filter(Gene_Symbols %in% pathway_terms_cycling_CTL)  %>% column_to_rownames(var = "Gene_Symbols") %>% mutate_if(is.character,as.numeric) %>% t %>% as.data.frame %>% rownames_to_column(var = "ID")
#merge pathway_tmm with cyclops preds
#(This gets rid of single subject in tmm not in cyc_pred)
pathway_tmm_df = merge(dplyr::select(cyc_pred, ID, interval, Phase, Covariate_D), pathway_tmm, by = "ID") %>% arrange(Phase) %>% unite(cond_bin, interval, Covariate_D, sep = "_")
pathway_tmm_median_df = pathway_tmm_df %>% dplyr::select(!c(ID, Phase))%>% group_by(cond_bin) %>%summarise_all(median)
#Here we have the median of binned expression data for each gene in both AD and CTL. We want to Z-norm the bins.
heatmap_tibble = pathway_tmm_median_df %>% separate(cond_bin, sep = "_cond_", into = c("bin", "cond")) %>% arrange(cond) %>%
mutate_at(vars(-bin, -cond), znorm)
#Get only cond == 0 subjects and transpose into heatmap format
heatmap_data_CTL = heatmap_tibble %>% filter(cond == 0) %>% dplyr::select(-cond) %>% column_to_rownames(var = "bin") %>% t
#Get only cond == 1 subjects and transpose into heatmap format
heatmap_data_AD = heatmap_tibble %>% filter(cond == 1) %>% dplyr::select(-cond) %>% column_to_rownames(var = "bin") %>% t
#arrange rows of heatmap_data to be in order of acrophase
row_order = order(CTL_cycling_res$acrophase[ match(rownames(heatmap_data_CTL), CTL_cycling_res$Gene_Symbols)])
heatmap_data_CTL = heatmap_data_CTL[row_order, ]
heatmap_data_AD = heatmap_data_AD[row_order, ]
#summarize how many subjects in each bin:
pathway_tmm_df %>% group_by(cond_bin) %>%summarise(n = n())
library(gplots)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
#
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")
library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:
# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
#
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()
row_names_fontzise = gpar(fontsize = 6)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_AD_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()
library(gplots)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
#
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")
library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:
# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
#
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()
row_names_fontzise = gpar(fontsize = 5)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_AD_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()
?Heatmap
library(gplots)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
#
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")
library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:
# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
#
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()
row_names_fontzise = gpar(fontsize = 5)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, height = unit(1, "npc"), heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
library(gplots)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
#
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")
library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:
# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
#
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()
row_names_fontzise = gpar(fontsize = 5)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, height = 8, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
library(gplots)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
#
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")
library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:
# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
#
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()
row_names_fontzise = gpar(fontsize = 5)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(1, "npc"))
dev.off()
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_AD_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()
library(gplots)
library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))
# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
#
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")
library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:
# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
#
#
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
#
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()
row_names_fontzise = gpar(fontsize = 5)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.9, "npc"))
dev.off()
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_AD_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.9, "npc"))
dev.off()
library(tidyverse)
rosmap_meta = read_csv("../ROSMAP_metadata/cleaned_rosmapmeta_n409.csv")
rosmap_meta = read_csv("../ROSMAP_metadata/cleaned_rosmapmeta_n409.csv", show_col_types = F)
subs_by_cond = rosmap_meta %>%
group_by(cond_cogdx)%>%
summarise(n = n(),median_age_at_death = median(age_death_numeric), mad_age_death = mad(age_death_numeric), mean_age_death_numeric = mean(age_death_numeric, na.rm = T), std_age_death_numeric = sd(age_death_numeric, na.rm = T),median_pmi = median(pmi, na.rm = T), mad_pmi = mad(pmi, na.rm = T), mean_pmi = mean(pmi, na.rm = T), sd_pmi = sd(pmi, na.rm = T), prop_male = sum(msex) / n, prop_ROS = sum(Study == "ROS")/ n, median_braaksc = median(braaksc))
View(subs_by_cond)
all_subs = rosmap_meta %>%
summarise(n = n(),median_age_at_death = median(age_death_numeric), mad_age_death = mad(age_death_numeric), mean_age_death_numeric = mean(age_death_numeric, na.rm = T), std_age_death_numeric = sd(age_death_numeric, na.rm = T),median_pmi = median(pmi, na.rm = T), mad_pmi = mad(pmi, na.rm = T), mean_pmi = mean(pmi, na.rm = T), sd_pmi = sd(pmi, na.rm = T), prop_male = sum(msex) / n, prop_ROS = sum(Study == "ROS")/ n, median_braaksc = median(braaksc))
all_subs$cond_cogdx = NaN
View(all_subs)
summary = bind_rows(subs_by_cond, all_subs)
summary$cond_cogdx[3] = "All"
summary
View(summary)
View(t(summary))
View(rosmap_meta)
table(rosmap_meta$msex)
132/277
132/(132+277)
250+159
load("/Users/henryhollis/Box Sync/Henry_stuff/AD_project/scROSMAP/scrosmap_newAtlas/scROSMAP_project/BestSubclusters_server_Exc.rda")
View(grid_results)
grid_results$levels
6868+16
library(combinat)
# Initialize an empty vector to store all results
strs <- c()
n = 16
# Loop over k values (3 to 5)
for (k in 2:5) {
# Generate all combinations of n choose k
combinations <- combn(1:n, k)
# Convert each combination to a string and append to the result vector
strs <- c(strs, apply(combinations, 2, function(x) paste0("^Exc\\.", x, "$", collapse = "|")))
}
library(combinat)
# Initialize an empty vector to store all results
strs <- c()
n = 16
# Loop over k values (3 to 5)
for (k in 1:5) {
# Generate all combinations of n choose k
combinations <- combn(1:n, k)
# Convert each combination to a string and append to the result vector
strs <- c(strs, apply(combinations, 2, function(x) paste0("^Exc\\.", x, "$", collapse = "|")))
}
debugSource("~/Box Sync/Henry_stuff/AD_project/scROSMAP/scrosmap_newAtlas/scROSMAP_project/Analysis_scripts/downstream_helpers/order_metabolon.R")
library(reticulate) #use to find conda env for python
library(tidyverse)
source("./downstream_helpers/differential_rhyth_generalized.R")
source("./downstream_helpers/create_rnk_files.R")
source("./downstream_helpers/fgsea.R")
source("./downstream_helpers/Files_for_Pscan.R")
source("./downstream_helpers/Make_KEGG_map_files.R")
source("./downstream_helpers/Check_TF_for_cycling_or_DR.R")
source("./downstream_helpers/plot_clock_face_plots.R")
source("./downstream_helpers/plot_gene_traces_generalized.R")
source("./downstream_helpers/order_metabolon.R")
source("./downstream_helpers/order_proteomics.R")
#path to cyclops ordering
path_to_cyclops_ordering = "../Cyclops_ordering/"
#path to normalized counts
path_to_tmm_file = "../normed_counts/ExcSubtypes35_FiltByExprDefault_TMM.csv"
# optional path to file containing differential expression results
edgeR_de_filename = "../edgeR_diff_expression/Exc3_5/Exc3_5_filtByExpr_edgeR_DE_QLFTest.csv"
path_to_rosmap_clin = "../ROSMAP_metadata/cleaned_rosmapmeta_n409.csv"
metabolon_filename = "../metabolic_data/ROSMAP_Metabolon_HD4_Brain514_assay_data.csv"
metabolon_datakey = "../metabolic_data/ROSMAP_Metabolon_HD4_Data_Dictionary.csv"
#BHQ corrected p cutoff to be considered cycling in analysis:
isCyclingBHQCutoff = 0.1
percentile = 0.
useBatch = T
order_metabolon(metabolon_filename, metabolon_datakey, path_to_rosmap_clin, path_to_cyclops_ordering)
debugSource("~/Box Sync/Henry_stuff/AD_project/scROSMAP/scrosmap_newAtlas/scROSMAP_project/Analysis_scripts/downstream_helpers/order_metabolon.R")
order_metabolon(metabolon_filename, metabolon_datakey, path_to_rosmap_clin, path_to_cyclops_ordering)
View(emat)
View(emat)
table(emat[1,])
table(emat[1,-1])
table(as.character(emat[1,]))
118+86
