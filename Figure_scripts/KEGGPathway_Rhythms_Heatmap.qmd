---
title: "Heatmap_pathway_rhythms"
format: html
editor: visual
---

### Read in TMM and cyclops prediction:

```{r}
library(tidyverse)
library(gridExtra)
#path to cyclops ordering
cyclops_fit= "../Cyclops_ordering/Fits/Fit_Output_2024-11-25T13_12_00.csv"

#I want to arrange the heatmaps by acrophase so I need cycling results
CTL_cycling_file = "../Cyclops_ordering/downstream_output_Mglia_all/cosinor_results_CTL.csv"
uncorrected_tmm_path = "../normed_counts/Mglia_all_FiltByExprDefault_TMM.csv"
plot_names = "Mglia_all_binned_median_znormed"

cyc_pred = read_csv(cyclops_fit, show_col_types = F) %>% arrange(Phase)
CTL_cycling_res = read_csv(CTL_cycling_file, show_col_types = F)
```

### Get Kegg pathway:

```{r}
setwd("../Analysis_scripts/MsigDB_gmts_for_GSEA")
Kegg = fgsea::gmtPathways("c2.cp.kegg_legacy.v2024.1.Hs.symbols.gmt")

pathway_name = "OxPhos"
pathway_terms = Kegg$KEGG_OXIDATIVE_PHOSPHORYLATION

# pathway_name = "Ribosome"
# pathway_terms = Kegg$KEGG_RIBOSOME
# pathway_terms = c(pathway_terms,CTL_cycling_res$Gene_Symbols[grep("MRP[SL]", CTL_cycling_res$Gene_Symbols)] )

#find genes in pathway cycling in CTLs
pathway_terms_cycling_CTL = filter(CTL_cycling_res, Gene_Symbols %in% pathway_terms & BHQ < 0.1) %>% dplyr::select(Gene_Symbols) %>% unname %>% unlist
```

### Regress Out Batch Effect

Here I use regression to fit batch term and then subtract the fitted batch offset from the expression:

```{r}
library(doParallel)
# Custom .combine function
combine_lists <- function(x, y) {
  # Combine corresponding elements (first and second) of the lists
  list(
    first = rbind(x[[1]], y[[1]]),
    second = rbind(x[[2]], y[[2]])
  )
}

uncorrected_tmm = read_csv(uncorrected_tmm_path, show_col_types = F)
#test which genes are cycling from cyclops subject phase prediction
regress_out_batch = function(cyc_pred, tmm){
   cat("\nRegressing out batch offset")

  seedlist = pathway_terms 

  cond_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "cond_d")
  cyc_pred$Covariate_D = tmm[cond_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
  sex_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "sex_d")
  cyc_pred$sex = tmm[sex_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
  pmi_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "pmi_c")
  cyc_pred$pmi = tmm[pmi_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
  
  batch_row_of_tmm = which(tolower(unlist(tmm[, 1])) == "batch_d")
  cyc_pred$batch = tmm[batch_row_of_tmm, na.exclude(match(cyc_pred$ID, colnames(tmm)))] %>% unname %>% unlist
  preds= dplyr::select(cyc_pred, ID, Covariate_D, Phase, batch, pmi, sex) %>% arrange(Phase)



  gene = tmm[which(unlist(unname(tmm[,1])) %in% seedlist), -1] 
  # gene = apply(gene, 2, as.numeric)
   gene = gene %>% mutate_all(as.numeric)
  gene1 = t(gene[,na.exclude(match(preds$ID, colnames(gene)))])  # get the transpose, subjects x genes and put in order of CYCLOPS order
  colnames(gene1) =  unname(unlist(tmm[which(unname(unlist(tmm[,1])) %in% seedlist), 1]))  #add the gene names to the columns of gene1

  #batch factor
  b = as.factor(preds$batch[match(rownames(gene1), preds$ID)])
  # CTL or AD factor
  I = as.factor(preds$Covariate_D[match(rownames(gene1), preds$ID)])
  #in the case that I have CYCLOPS preds for subs not in tmm...
  times = as.numeric(preds$Phase[match(rownames(gene1), preds$ID)]) 
  #sex of each subject
  s = as.factor(preds$sex[match(rownames(gene1), preds$ID)])
  #pmi of each subject
  p = as.numeric(preds$pmi[match(rownames(gene1), preds$ID)]) 
  
  all_genes = foreach (gene_i = 1:ncol(gene1), .combine = combine_lists) %do%{
    gexp1 = as.numeric(unlist(gene1[,gene_i]))
    times1 = times
    I1 = I
    s1 = s
    p1 = p
    b1 = b
    rm_NA = which(is.na(gexp1))
      if(!is_empty(rm_NA)){
        gexp1 = gexp1[-rm_NA]
        times1 = times1[-rm_NA]
        I1 = I[-rm_NA]
        s1 = s1[-rm_NA]
        p1 = p1[-rm_NA]
        b1 = b1[-rm_NA]
      }


        partial_model = lm(gexp1 ~ sin(times1) + cos(times1) + I1 + b1 + p1 + s1)
        full_model = lm(gexp1 ~ I1*sin(times1) + I1*cos(times1) + I1 + b1 + p1 + s1)
        design_matrix <- model.matrix(gexp1 ~ I1*sin(times1) + I1*cos(times1) + I1 + b1 + p1 + s1)


      anova_results = anova(partial_model, full_model)

      p_val = anova_results$`Pr(>F)`[2]
      Gene_Symbols = colnames(gene1)[gene_i]
      sin_coeff = full_model[["coefficients"]][["sin(times1)"]]
      cos_coeff = full_model[["coefficients"]][["cos(times1)"]]
      sin_coeff2 = full_model[["coefficients"]][["I1cond_1:sin(times1)"]] + sin_coeff
      cos_coeff2 = full_model[["coefficients"]][["I1cond_1:cos(times1)"]] + cos_coeff
      acrophase_CTL = atan2(sin_coeff, cos_coeff) %% (2*pi)
      acrophase_AD = atan2(sin_coeff2, cos_coeff2) %% (2*pi)
      amplitude_CTL = sqrt((sin_coeff^2) + (cos_coeff^2))
      amplitude_AD = sqrt((sin_coeff2^2) + (cos_coeff2^2))


      rm_coeffs = grep("sin|cos",names(full_model[["coefficients"]]))
      mesor_AD = mean(subset(design_matrix[,-rm_coeffs], design_matrix[, "I1cond_1"]== 1 ) %*% full_model[["coefficients"]][-rm_coeffs])
      mesor_CTL = mean(subset(design_matrix[,-rm_coeffs], design_matrix[, "I1cond_1"]== 0 ) %*% full_model[["coefficients"]][-rm_coeffs])

      amp_ratio_CTL = amplitude_CTL/ mesor_CTL
      amp_ratio_AD = amplitude_AD/ mesor_AD

      gene_summary = cbind( Gene_Symbols, p_val, acrophase_AD, acrophase_CTL, amplitude_AD, amplitude_CTL, amp_ratio_CTL, amp_ratio_AD, mesor_CTL, mesor_AD)
        
        batch_offset_correct = design_matrix[,"b1cond_1"] * full_model$coefficients[["b1cond_1"]]
        gexp_out = gexp1 - batch_offset_correct
        names(gexp_out) = rownames(gene1) #retain each subject ID
      list(gene_summary, gexp_out)
    
  }
  

  return(all_genes)

}

df = regress_out_batch(cyc_pred, uncorrected_tmm)
cycling_params = as.data.frame(df$first) #Do these match preds?
tmm_corrected = as.data.frame(df$second)
rownames(tmm_corrected) = cycling_params$Gene_Symbols

tmm_corrected = tmm_corrected[,as.character(cyc_pred$ID)]
```

### Bin and arrange expression data

We want the genes to be z-normed including both conditions so that differences in amplitude can be seen across heatmaps

```{r}
#Define z-norm function
znorm = function(x){
  x = as.numeric(x)
  m = mean(x)
  s = sd(x)
  return((x-m)/s)
}
```

```{r}
tmm = tmm_corrected %>% rownames_to_column(var = "Gene_Symbols")

#create breaks of (0, 2pi]
# cyc_pred$interval = cut(cyc_pred$Phase,breaks = seq(0, 2*pi, by = pi/2) )
cyc_pred$interval = cut(cyc_pred$Phase,breaks = seq(0, 2*pi, by = pi/4) )

#select genes from tmm in pathway, convert to numeric, transpose to subsXgenes
pathway_tmm = tmm %>% dplyr::filter(Gene_Symbols %in% pathway_terms_cycling_CTL)  %>% column_to_rownames(var = "Gene_Symbols") %>% mutate_if(is.character,as.numeric) %>% t %>% as.data.frame %>% rownames_to_column(var = "ID")


#merge pathway_tmm with cyclops preds
#(This gets rid of single subject in tmm not in cyc_pred)
pathway_tmm_df = merge(dplyr::select(cyc_pred, ID, interval, Phase, Covariate_D), pathway_tmm, by = "ID") %>% arrange(Phase) %>% unite(cond_bin, interval, Covariate_D, sep = "_")

pathway_tmm_median_df = pathway_tmm_df %>% dplyr::select(!c(ID, Phase))%>% group_by(cond_bin) %>%summarise_all(median)

#Here we have the median of binned expression data for each gene in both AD and CTL. We want to Z-norm the bins.
heatmap_tibble = pathway_tmm_median_df %>% separate(cond_bin, sep = "_cond_", into = c("bin", "cond")) %>% arrange(cond) %>%
  mutate_at(vars(-bin, -cond), znorm) 

#Get only cond == 0 subjects and transpose into heatmap format
heatmap_data_CTL = heatmap_tibble %>% filter(cond == 0) %>% dplyr::select(-cond) %>% column_to_rownames(var = "bin") %>% t

#Get only cond == 1 subjects and transpose into heatmap format
heatmap_data_AD = heatmap_tibble %>% filter(cond == 1) %>% dplyr::select(-cond) %>% column_to_rownames(var = "bin") %>% t

#arrange rows of heatmap_data to be in order of acrophase
row_order = order(CTL_cycling_res$acrophase[ match(rownames(heatmap_data_CTL), CTL_cycling_res$Gene_Symbols)])

heatmap_data_CTL = heatmap_data_CTL[row_order, ]
heatmap_data_AD = heatmap_data_AD[row_order, ]

#summarize how many subjects in each bin:
pathway_tmm_df %>% group_by(cond_bin) %>%summarise(n = n())

```

```{r}
library(gplots)

library(circlize)
col_fun = colorRamp2(c(-2, 0, 2), c("blue", "black", "yellow"))


# times = as.character(seq(0, 24, by = 6))
# times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
times = c(expression(pi/4),expression(2*pi/4), expression(3*pi/4),expression(pi), expression(5*pi/4),expression(6*pi/4), expression(7*pi/4),expression(2*pi))

# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
# 
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")

library(ComplexHeatmap)
#Uncomment to draw heatmaps on same plot:

# row_names_fontzise = gpar(fontsize = 10)
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
# draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
# 
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
# draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
# upViewport()
# 
# 
# lgd = Legend(at = c( -2, 0, 2), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))
# 
# pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
# grid.draw(lgd)
# upViewport()



row_names_fontzise = gpar(fontsize = 6)
pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_CTL_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()

pdf(paste0("~/Desktop/",plot_names,"_", pathway_name, "_heatmap_AD_8bins.pdf"))
Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = T, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "right", row_names_gp = row_names_fontzise, heatmap_legend_param = list(title = "Z-normed \nExpression", legend_height = unit(.2, "npc")), width = unit(.3, "npc"), height =  unit(.8, "npc"))
dev.off()




```
